const fs = require("fs");
const path = require("path");
const parser = require("@babel/parser");
const { default: traverse } = require("@babel/traverse");
const { default: generate } = require("@babel/generator");

const sourceDir = path.resolve(__dirname, "../api-h5/src");
const tagetDir = path.resolve(__dirname, "src");

if (fs.existsSync(tagetDir)) {
  fs.rmSync(tagetDir, {
    recursive: true,
  });
}

fs.mkdirSync(tagetDir);

// run
run(fs.readdirSync(sourceDir));
console.log(`Generate files successfully`);

function run(files, dir = "") {
  files.forEach((f) => {
    const filePath = path.resolve(sourceDir, dir, f);
    const stat = fs.statSync(filePath);
    if (stat.isFile()) {
      generateFile(path.join(dir, f));
    } else if (stat.isDirectory()) {
      fs.mkdirSync(path.resolve(tagetDir, dir, f));
      const nestFiles = fs.readdirSync(filePath);
      run(nestFiles, path.join(dir, f));
    }
  });
}

function generateFile(fileName) {
  const content = fs.readFileSync(`${sourceDir}/${fileName}`, "utf8");
  const ast = parser.parse(`// Generated by script\n ${content}`, {
    sourceType: "module",
    plugins: ["typescript"],
  });

  // change deps
  traverse(ast, {
    ImportDeclaration({ node }) {
      if (node.source.value === "@1r21/request-h5") {
        node.source.value = "@1r21/request-wx";
      }
    },
  });
  const { code } = generate(ast);
  fs.writeFileSync(`${tagetDir}/${fileName}`, code, "utf8");
}
